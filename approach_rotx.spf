PROC APPROACH_ROTX(REAL X_DEST, REAL Y_DEST, REAL Z_DEST, REAL RZ_DEST, REAL RY_DEST, REAL RX_DEST, REAL ROTX_DEST, REAL DIST_DEST)

;DEFINE VARIABLES
DEF REAL Z_SAFE = 550.0
DEF REAL Z_INITIAL = 100.0
DEF REAL POS_Z1 = 0.0
DEF REAL F_PTP = 2000.0
DEF REAL F_CP = 6000.0
DEF REAL F_ROT = 4320.0
DEF INT INITWOFF
DEF REAL ROTX_DIFF
DEF FRAME FRAME_EXTRA
DEF REAL X_EXTRA
DEF REAL Y_EXTRA
DEF REAL Z_EXTRA
DEF REAL RZ_EXTRA
DEF REAL RY_EXTRA
DEF REAL RX_EXTRA

;DEFINE IN/OUT VARIABLES
DEF REAL XSAFE
DEF REAL YSAFE
DEF REAL ZSAFE
DEF REAL RZSAFE
DEF REAL RYSAFE
DEF REAL RXSAFE
DEF REAL ROTXSAFE

DEF REAL XMID
DEF REAL YMID
DEF REAL ZMID
DEF REAL RZMID
DEF REAL RYMID
DEF REAL RXMID

;INITIALIZE IN/OUT VARIABLES
XSAFE = X_DEST
YSAFE = Y_DEST
ZSAFE = Z_DEST
RZSAFE = RZ_DEST
RYSAFE = RY_DEST
RXSAFE = RX_DEST
ROTXSAFE = ROTX_DEST

;BEGINNING OF MACRO
M67 ;INDICATION APPROACH MACRO HAS STARTED

;INITIALIZE MOTION SETTINGS
STOPRE
G710
ROTX_TRAFO(0)
STOPRE
TRAORI
STOPRE
PRESETONS(DIST,DIST_DEST)
;VELOLIM[ROTX]=98 ;REPLACED IN ROTX_INERTIA_CALCS.SPF
STOPRE

;RETURN ROBOT TO HOME POSITION
GOTO_PARK
STOPRE
HEAD_OFFSETS(R[21],R[22],R[23])
STOPRE

;CALCULATE AND MOVE TO A SAFE APPROACH POSITIONS
;UPDATE THE IN/OUT VARIABLES TO CALCULATE POINTS TO APPROACH SAFE RADIUS
SAFE_RADIUS_ENTRY(XSAFE, YSAFE, ZSAFE, RZSAFE, RYSAFE, RXSAFE, ROTXSAFE)

;CALCULATE MIDPOINT POSITION AND ROTATIONS
XMID = XSAFE
YMID = YSAFE
ZMID = ZSAFE
SAFE_RADIUS_MIDPOINT(XMID, YMID, ZMID)
RZMID = 0.5*RZSAFE
RYMID = 0.5*RYSAFE
RXMID = 0.5*RXSAFE
STOPRE

;SET ROTX AT INITIAL POSITION
G1 POS[ROTX]=DC(ROTXSAFE) FA[ROTX]=F_ROT

;MOVE TO INITIAL POSITION AT THE SAFE RADIUS
CP G1 X=XMID Y=YMID Z=ZMID RZ=RZMID RY=RYMID RX=RXMID F=F_CP
CP G1 X=XSAFE Y=YSAFE Z=ZSAFE RZ=RZSAFE RY=RYSAFE RX=RXSAFE F=F_CP

;DETERMINE IF ADDITIONAL POINT REQUIRED IN PATH FROM ROTATOR TILT
ROTX_DIFF = ROTXSAFE - ROTX_DEST
IF ABS(ROTX_DIFF) > 0.001 ;CHECK IF DIFFERENCE IS GREATER THAN FLOATING POINT ERROR
    ;IF TRUE, PART IS TILTED, AND ADDITIONAL INSERTED POINT IS REQUIRED
    ;CREATE A COORDINATE SYSTEM AT THE APPROACH POINT
    FRAME_EXTRA = CTRANS(X,X_DEST,Y,Y_DEST,Z,Z_DEST):CROT(Z,RZ_DEST):CROT(Y,RY_DEST):CROT(X,RX_DEST); *DO NOT ROTATE AROUND -X! JUST CREATE AT POINT
    ;ROTATE FRAME BY ROTX_DIFF. *ROTATE AROUND -X, REQUIRES [-] SIGN
    FRAME_EXTRA = CROT(X,-ROTX_DEST):CROT(X,-ROTX_DIFF):FRAME_EXTRA 

    X_EXTRA = FRAME_EXTRA[X,TR] + $MC_ROBX_EXT_ROT_BASE_OFFSET[0]
    Y_EXTRA = FRAME_EXTRA[Y,TR] + $MC_ROBX_EXT_ROT_BASE_OFFSET[1]
    Z_EXTRA = FRAME_EXTRA[Z,TR] + $MC_ROBX_EXT_ROT_BASE_OFFSET[2]
    RZ_EXTRA = FRAME_EXTRA[Z,RT]
    RY_EXTRA = FRAME_EXTRA[Y,RT]
    RX_EXTRA = FRAME_EXTRA[X,RT]
    STOPRE
    
    ;UNCOMMENT FOLLOWING LINES TO DEBUG OUTPUTS
    ;MSG(""<<X_EXTRA<<", "<<Y_EXTRA<<", "<<Z_EXTRA<<", "<<RZ_EXTRA<<", "<<RY_EXTRA<<", "<<RX_EXTRA<<"")
    ;M0
    ;STOPRE
    
    ;MOVE TO ADDITIONAL POINT, EQUIVALENT TO FLY-IN BUT WITH ROTX TILT
    CP G1 X=X_EXTRA Y=Y_EXTRA Z=Z_EXTRA RZ=RZ_EXTRA RY=RY_EXTRA RX=RX_EXTRA F=F_CP
    STOPRE
ENDIF

;ACTIVATE 7-AXIS TRANSFORM WITH ROTX
STOPRE
ROTX_TRAFO(1)
STOPRE

;MOVE TO FINAL POSITION
CP G1 X=X_DEST Y=Y_DEST Z=Z_DEST RZ=RZ_DEST RY=RY_DEST RX=RX_DEST F=F_CP

RET
