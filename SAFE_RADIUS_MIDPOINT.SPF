PROC SAFE_RADIUS_MIDPOINT(VAR REAL XPOS, VAR REAL YPOS, VAR REAL ZPOS)
;THIS MACRO WORKS ALONGSIDE THE SAFE_RADIUS_ENTRY MACRO, BOTH ARE REQUIRED
;THIS TAKES THE END POSITION FROM SAFE_RADIUS_ENTRY AND DETERMINES A MID POINT OF TRAVEL
;THE INPUTS ARE UPDATED AS IN/OUT VARIABLES, AND THE MOTION IS COMMANDED IN THE UPPER LEVEL MACRO
;THE INPUTS AND UPDATED IN/OUTS ARE POINTS IN THE NORMAL ROBOT BCS

;DEFINE VARIABLES
DEF REAL XCUR
DEF REAL YCUR
DEF REAL ZCUR
DEF REAL XEND
DEF REAL YEND
DEF REAL ZEND
DEF REAL ROTY_XPOS
DEF REAL ROTY_ZPOS

DEF REAL RCUR
DEF REAL REND
DEF REAL RAVG

DEF REAL DIST_CHECK1
DEF REAL DIST_CHECK2

;INITIALIZE VARIABLES
XCUR = $AA_IB[X]
YCUR = $AA_IB[Y]
ZCUR = $AA_IB[Z]
ROTY_XPOS = $MC_ROBX_EXT_ROT_BASE_OFFSET[0]
ROTY_ZPOS = $MC_ROBX_EXT_ROT_BASE_OFFSET[2]

;STORE INPUTS USED AS IN/OUTS INTO TEMP VARIABLES
XEND = XPOS
YEND = YPOS
ZEND = ZPOS

;DETERMINE RADIUS AWAY FROM ROTY CENTER AT START AND END
;CREATE A MIDPOINT RADIUS TO TRAVEL THROUGH USING RAVG
RCUR = SQRT(POT(XCUR-ROTY_XPOS)+POT(ZCUR-ROTY_ZPOS))
REND = SQRT(POT(XEND-ROTY_XPOS)+POT(ZEND-ROTY_ZPOS))
RAVG = 0.5*(RCUR+REND)

;USE AVERAGE OF X AND Y POSITIONS FOR THE MIDPOINT
XPOS = 0.5*(XCUR+XPOS)
YPOS = 0.5*(YCUR+YPOS)

;CALCULATE ZPOS BY CALCULATING THE Z REQUIRED TO ACHIEVE RAVG USING XAVG
ZPOS = SQRT(POT(RAVG)-POT(XPOS-ROTY_XPOS))

;THE SIGN OF Z MUST BE CHECKED, SINCE THE SQUARE ROOT IS POSITIVE OR NEGATIVE
;SIGN IS DETERMINED BY CALCULATING THE DISTANCE TO POSITION 1 (+ZPOS) AND POSITION 2 (-ZPOS)
DIST_CHECK1=SQRT(POT(XEND-XPOS)+POT(ZEND-ZPOS))
DIST_CHECK2=SQRT(POT(XEND-XPOS)+POT(ZEND-(-ZPOS)))

;SELECT THE SIGN BASED ON WHICH DISTANCE IS THE SHORTEST
IF DIST_CHECK1 <= DIST_CHECK2
    ZPOS=ZPOS
ELSE
    ZPOS=-ZPOS
ENDIF

;CALCULATIONS COMPLETE

;UNCOMMENT THE FOLLOWING LINES TO DEBUG
;MSG("CUR:"<<XCUR<<", "<<YCUR<<", "<<ZCUR<<", "<<RCUR<<"")
;M0
;STOPRE

;MSG("END:"<<XEND<<", "<<YEND<<", "<<ZEND<<", "<<REND<<"")
;M0
;STOPRE

;MSG("MID:"<<XPOS<<", "<<YPOS<<", "<<ZPOS<<", "<<RAVG<<"")
;M0
;STOPRE

RET
